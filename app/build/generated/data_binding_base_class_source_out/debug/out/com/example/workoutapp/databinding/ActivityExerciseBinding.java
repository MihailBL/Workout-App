// Generated by view binder compiler. Do not edit!
package com.example.workoutapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.workoutapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityExerciseBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final FrameLayout flExerciseProgressBar;

  @NonNull
  public final FrameLayout flGetReadyProgressBar;

  @NonNull
  public final ImageView ivExerciseImage;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final ProgressBar progressBarExercise;

  @NonNull
  public final RecyclerView rvExerciseStatus;

  @NonNull
  public final Toolbar toolbarExerciseActivity;

  @NonNull
  public final TextView tvExerciseTimer;

  @NonNull
  public final TextView tvExerciseTitle;

  @NonNull
  public final TextView tvNextExercise;

  @NonNull
  public final TextView tvNextExerciseName;

  @NonNull
  public final TextView tvTimer;

  private ActivityExerciseBinding(@NonNull ConstraintLayout rootView,
      @NonNull FrameLayout flExerciseProgressBar, @NonNull FrameLayout flGetReadyProgressBar,
      @NonNull ImageView ivExerciseImage, @NonNull ProgressBar progressBar,
      @NonNull ProgressBar progressBarExercise, @NonNull RecyclerView rvExerciseStatus,
      @NonNull Toolbar toolbarExerciseActivity, @NonNull TextView tvExerciseTimer,
      @NonNull TextView tvExerciseTitle, @NonNull TextView tvNextExercise,
      @NonNull TextView tvNextExerciseName, @NonNull TextView tvTimer) {
    this.rootView = rootView;
    this.flExerciseProgressBar = flExerciseProgressBar;
    this.flGetReadyProgressBar = flGetReadyProgressBar;
    this.ivExerciseImage = ivExerciseImage;
    this.progressBar = progressBar;
    this.progressBarExercise = progressBarExercise;
    this.rvExerciseStatus = rvExerciseStatus;
    this.toolbarExerciseActivity = toolbarExerciseActivity;
    this.tvExerciseTimer = tvExerciseTimer;
    this.tvExerciseTitle = tvExerciseTitle;
    this.tvNextExercise = tvNextExercise;
    this.tvNextExerciseName = tvNextExerciseName;
    this.tvTimer = tvTimer;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityExerciseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityExerciseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_exercise, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityExerciseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fl_exerciseProgressBar;
      FrameLayout flExerciseProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (flExerciseProgressBar == null) {
        break missingId;
      }

      id = R.id.fl_getReadyProgressBar;
      FrameLayout flGetReadyProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (flGetReadyProgressBar == null) {
        break missingId;
      }

      id = R.id.iv_exerciseImage;
      ImageView ivExerciseImage = ViewBindings.findChildViewById(rootView, id);
      if (ivExerciseImage == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.progressBarExercise;
      ProgressBar progressBarExercise = ViewBindings.findChildViewById(rootView, id);
      if (progressBarExercise == null) {
        break missingId;
      }

      id = R.id.rv_exerciseStatus;
      RecyclerView rvExerciseStatus = ViewBindings.findChildViewById(rootView, id);
      if (rvExerciseStatus == null) {
        break missingId;
      }

      id = R.id.toolbarExerciseActivity;
      Toolbar toolbarExerciseActivity = ViewBindings.findChildViewById(rootView, id);
      if (toolbarExerciseActivity == null) {
        break missingId;
      }

      id = R.id.tv_exerciseTimer;
      TextView tvExerciseTimer = ViewBindings.findChildViewById(rootView, id);
      if (tvExerciseTimer == null) {
        break missingId;
      }

      id = R.id.tv_exerciseTitle;
      TextView tvExerciseTitle = ViewBindings.findChildViewById(rootView, id);
      if (tvExerciseTitle == null) {
        break missingId;
      }

      id = R.id.tv_nextExercise;
      TextView tvNextExercise = ViewBindings.findChildViewById(rootView, id);
      if (tvNextExercise == null) {
        break missingId;
      }

      id = R.id.tv_nextExerciseName;
      TextView tvNextExerciseName = ViewBindings.findChildViewById(rootView, id);
      if (tvNextExerciseName == null) {
        break missingId;
      }

      id = R.id.tv_timer;
      TextView tvTimer = ViewBindings.findChildViewById(rootView, id);
      if (tvTimer == null) {
        break missingId;
      }

      return new ActivityExerciseBinding((ConstraintLayout) rootView, flExerciseProgressBar,
          flGetReadyProgressBar, ivExerciseImage, progressBar, progressBarExercise,
          rvExerciseStatus, toolbarExerciseActivity, tvExerciseTimer, tvExerciseTitle,
          tvNextExercise, tvNextExerciseName, tvTimer);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
